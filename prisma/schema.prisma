// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String           @id @default(uuid())
  email              String           @unique
  username           String
  password           String?
  problems_attempted ProblemAttempt[]
  problems_created   Problem[]
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
}

model Problem {
  id          String           @id @default(uuid())
  title       String           @unique
  description String
  creator     User             @relation(fields: [creatorId], references: [id])
  creatorId   String
  difficulty  Difficulty       @default(MEDIUM)
  attempts    ProblemAttempt[]
  boilerPlate BoilerPlate[]
  testCases   TestCase[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model ProblemAttempt {
  id          String       @id @default(uuid())
  problem     Problem      @relation(fields: [problemId], references: [title])
  problemId   String
  user        User         @relation(fields: [userId], references: [email])
  userId      String
  solved      Boolean      @default(false)
  submissions Submission[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Submission {
  id               String          @id @default(uuid())
  problemAttempt   ProblemAttempt  @relation(fields: [problemAttemptId], references: [id])
  problemAttemptId String
  code             String
  language         Language        @default(PYTHON)
  status           Status          @default(PENDING)
  testCases        TokenTestCase[]
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

model TokenTestCase {
  id           String     @id @default(uuid())
  tokenId      String     @unique
  submission   Submission @relation(fields: [submissionId], references: [id])
  submissionId String
  status       Status     @default(PENDING)
  message      String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model BoilerPlate {
  id        String   @id @default(uuid())
  problem   Problem  @relation(fields: [problemId], references: [id])
  problemId String
  language  Language @default(PYTHON)
  code      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TestCase {
  id        String   @id @default(uuid())
  problem   Problem  @relation(fields: [problemId], references: [id])
  problemId String
  input     String
  output    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum Language {
  JAVASCRIPT
  PYTHON
  JAVA
  C
  CPP
  GO
  RUST
}

enum Status {
  PENDING
  ACCEPTED
  WRONG_ANSWER
  RUNTIME_ERROR
  TIME_LIMIT_EXCEEDED
  MEMORY_LIMIT_EXCEEDED
  COMPILATION_ERROR
}
